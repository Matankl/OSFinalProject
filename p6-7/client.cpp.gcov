        -:    0:Source:client.cpp
        -:    0:Graph:client.gcno
        -:    0:Data:client.gcda
        -:    0:Runs:1
        -:    1:/*******************************************************
        -:    2: * client.cpp
        -:    3: * A simple TCP client that:
        -:    4: *   - Connects to the server on a given IP/port.
        -:    5: *   - Reads commands from std::cin
        -:    6: *   - Sends each command to the server.
        -:    7: *   - Waits for the server's response and prints it.
        -:    8: *******************************************************/
        -:    9:
        -:   10:#include <iostream>
        -:   11:#include <string>
        -:   12:#include <cstring>      // for memset
        -:   13:#include <unistd.h>     // for close(), read(), write()
        -:   14:#include <sys/socket.h>
        -:   15:#include <arpa/inet.h>
        -:   16:#include <netinet/in.h>
        -:   17:
        1:   18:int main() {
        1:   19:    std::string serverIP   = "127.0.0.1"; 
        1:   20:    int         serverPort = 12345;
        -:   21:
        -:   22:    // Create socket
        1:   23:    int sockFD = socket(AF_INET, SOCK_STREAM, 0);
        1:   24:    if(sockFD < 0) {
    #####:   25:        std::cerr << "[Client] socket() failed\n";
    #####:   26:        return 1;
        -:   27:    }
        -:   28:
        -:   29:    // Connect
        -:   30:    sockaddr_in servAddr;
        1:   31:    memset(&servAddr, 0, sizeof(servAddr));
        1:   32:    servAddr.sin_family = AF_INET;
        1:   33:    servAddr.sin_port   = htons(serverPort);
        1:   34:    inet_pton(AF_INET, serverIP.c_str(), &servAddr.sin_addr);
        -:   35:
        1:   36:    if(connect(sockFD, (sockaddr*)&servAddr, sizeof(servAddr)) < 0) {
    #####:   37:        std::cerr << "[Client] connect() failed\n";
    #####:   38:        close(sockFD);
    #####:   39:        return 1;
        -:   40:    }
        -:   41:
        1:   42:    std::cout << "[Client] Connected to server at " << serverIP << ":" << serverPort << std::endl;
        -:   43:
        -:   44:    // Main loop: read user commands, send to server, read reply.
        -:   45:    while(true) {
        -:   46:        // Prompt
       13:   47:        std::cout << "Enter command (or QUIT/EXIT): ";
       13:   48:        std::string line;
       13:   49:        if(!std::getline(std::cin, line)) {
    #####:   50:            std::cout << "[Client] End of input.\n";
    #####:   51:            break;
        -:   52:        }
        -:   53:
      13*:   54:        if(line.empty()) {
    #####:   55:            continue;
        -:   56:        }
        -:   57:
        -:   58:        // Send the line to the server
       13:   59:        line.push_back('\n');  // ensure newline
       13:   60:        int bytesSent = write(sockFD, line.c_str(), line.size());
       13:   61:        if(bytesSent < 0) {
    #####:   62:            std::cerr << "[Client] write() failed\n";
    #####:   63:            break;
        -:   64:        }
        -:   65:
        -:   66:        // If the user typed QUIT or EXIT, we expect the server to close soon
        -:   67:        // but let's still try to read the server's final response
       13:   68:        if(line.find("QUIT") == 0 || line.find("EXIT") == 0) {
        -:   69:            // read once and then break
        -:   70:            char buffer[1024];
        1:   71:            memset(buffer,0,1024);
        1:   72:            int n = read(sockFD, buffer, 1023);
        1:   73:            if(n > 0) {
    #####:   74:                std::cout << "[Server Reply] " << buffer << std::endl;
        -:   75:            }
        1:   76:            std::cout << "[Client] Closing.\n";
        1:   77:            break;
        -:   78:        }
        -:   79:
        -:   80:        // Read server response (one line). 
        -:   81:        char buffer[1024];
       12:   82:        memset(buffer,0,1024);
       12:   83:        int n = read(sockFD, buffer, 1023);
       12:   84:        if(n <= 0) {
    #####:   85:            std::cerr << "[Client] Server closed connection or error.\n";
    #####:   86:            break;
        -:   87:        }
        -:   88:        // Print server's reply
       12:   89:        std::cout << "[Server Reply] " << buffer << std::endl;
       25:   90:    }
        -:   91:
        1:   92:    close(sockFD);
        1:   93:    return 0;
        1:   94:}







(base) or@or:~/Desktop/OSFin/OSFinalProject/p5$ gcov client.cpp
File 'client.cpp'
Lines executed:71.11% of 45
Creating 'client.cpp.gcov'
